{
    "$schema": "https://docs.oasis-open.org/sarif/sarif/v2.1.0/os/schemas/sarif-schema-2.1.0.json",
    "runs": [
        {
            "invocations": [
                {
                    "executionSuccessful": true,
                    "toolExecutionNotifications": []
                }
            ],
            "results": [
                {
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "app/models/runner.js",
                                    "uriBaseId": "%SRCROOT%"
                                },
                                "region": {
                                    "endColumn": 78,
                                    "endLine": 143,
                                    "snippet": {
                                        "text": "    const metricsAdapter = require(`../adapters/${metricsPluginName}Adapter`);"
                                    },
                                    "startColumn": 28,
                                    "startLine": 143
                                }
                            }
                        }
                    ],
                    "message": {
                        "text": "Detected the use of require(variable). Calling require with a non-literal argument might\nallow an attacker to load an run arbitrary code, or access arbitrary files.\n"
                    },
                    "ruleId": "semgrep_rules.eslint.detect-non-literal-require"
                },
                {
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "app/app.js",
                                    "uriBaseId": "%SRCROOT%"
                                },
                                "region": {
                                    "endColumn": 63,
                                    "endLine": 20,
                                    "snippet": {
                                        "text": "        containerId = marathonAppId[marathonAppId.length - 1];"
                                    },
                                    "startColumn": 9,
                                    "startLine": 20
                                }
                            }
                        }
                    ],
                    "message": {
                        "text": "Detected user input used in bracket notation accessor. This could lead to object injection through marathonAppId.length - 1, which could grant access to every property available in the object and therefore sensitive information. Instead, avoid the use of user input in property name fields or create a whitelist of allowed input."
                    },
                    "ruleId": "semgrep_rules.detect-bracket-object-injection"
                },
                {
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "app/models/runner.js",
                                    "uriBaseId": "%SRCROOT%"
                                },
                                "region": {
                                    "endColumn": 78,
                                    "endLine": 143,
                                    "snippet": {
                                        "text": "    const metricsAdapter = require(`../adapters/${metricsPluginName}Adapter`);"
                                    },
                                    "startColumn": 28,
                                    "startLine": 143
                                }
                            }
                        }
                    ],
                    "message": {
                        "text": "Detected the use of require(variable). Calling require with a non-literal argument might allow an attacker to load an run arbitrary code, or access arbitrary files."
                    },
                    "ruleId": "semgrep_rules.detect-non-literal-require"
                },
                {
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": ".circleci/config.yml",
                                    "uriBaseId": "%SRCROOT%"
                                },
                                "region": {
                                    "endColumn": 1,
                                    "endLine": 11,
                                    "snippet": {
                                        "text": "      - run: npm install\n      - save_cache:"
                                    },
                                    "startColumn": 14,
                                    "startLine": 10
                                }
                            }
                        }
                    ],
                    "message": {
                        "text": "To ensure reproducable and deterministic builds, use `npm ci` rather than `npm install` in scripts. This will use the lockfile rather than updating it."
                    },
                    "ruleId": "semgrep_rules.use-frozen-lockfile-npm"
                },
                {
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "Dockerfile",
                                    "uriBaseId": "%SRCROOT%"
                                },
                                "region": {
                                    "endColumn": 1,
                                    "endLine": 16,
                                    "snippet": {
                                        "text": "#    # npm install\n    npm install --production"
                                    },
                                    "startColumn": 8,
                                    "startLine": 15
                                }
                            }
                        }
                    ],
                    "message": {
                        "text": "To ensure reproducable and deterministic builds, use `npm ci` rather than `npm install` in scripts. This will use the lockfile rather than updating it."
                    },
                    "ruleId": "semgrep_rules.use-frozen-lockfile-npm"
                },
                {
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "Dockerfile",
                                    "uriBaseId": "%SRCROOT%"
                                },
                                "region": {
                                    "endColumn": 17,
                                    "endLine": 16,
                                    "snippet": {
                                        "text": "    npm install --production"
                                    },
                                    "startColumn": 5,
                                    "startLine": 16
                                }
                            }
                        }
                    ],
                    "message": {
                        "text": "To ensure reproducable and deterministic builds, use `npm ci` rather than `npm install` in scripts. This will use the lockfile rather than updating it."
                    },
                    "ruleId": "semgrep_rules.use-frozen-lockfile-npm"
                },
                {
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "semgrep_rules/semgrepRulles.yml",
                                    "uriBaseId": "%SRCROOT%"
                                },
                                "region": {
                                    "endColumn": 40,
                                    "endLine": 7535,
                                    "snippet": {
                                        "text": "      - pattern-not-regex: npm install [\\w]+"
                                    },
                                    "startColumn": 28,
                                    "startLine": 7535
                                }
                            }
                        }
                    ],
                    "message": {
                        "text": "To ensure reproducable and deterministic builds, use `npm ci` rather than `npm install` in scripts. This will use the lockfile rather than updating it."
                    },
                    "ruleId": "semgrep_rules.use-frozen-lockfile-npm"
                },
                {
                    "locations": [
                        {
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "semgrep_rules/test_rules.yml",
                                    "uriBaseId": "%SRCROOT%"
                                },
                                "region": {
                                    "endColumn": 40,
                                    "endLine": 5,
                                    "snippet": {
                                        "text": "      - pattern-not-regex: npm install [\\w]+"
                                    },
                                    "startColumn": 28,
                                    "startLine": 5
                                }
                            }
                        }
                    ],
                    "message": {
                        "text": "To ensure reproducable and deterministic builds, use `npm ci` rather than `npm install` in scripts. This will use the lockfile rather than updating it."
                    },
                    "ruleId": "semgrep_rules.use-frozen-lockfile-npm"
                }
            ],
            "tool": {
                "driver": {
                    "name": "semgrep",
                    "rules": [
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "The RC4 stream-cipher has been cryptographically broken and is unsuitable\nfor use in production. It is recommended that ChaCha20 or Advanced Encryption\nStandard (AES) be used instead.\n"
                            },
                            "id": "semgrep_rules.gosec.G503-1",
                            "name": "semgrep_rules.gosec.G503-1",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                                    "OWASP-A9: Using Components with Known Vulnerabilities"
                                ]
                            },
                            "shortDescription": {
                                "text": "The RC4 stream-cipher has been cryptographically broken and is unsuitable\nfor use in production. It is recommended that ChaCha20 or Advanced Encryption\nStandard (AES) be used instead.\n"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "Poor file permissions used when creating a directory\n"
                            },
                            "id": "semgrep_rules.gosec.G301-1",
                            "name": "semgrep_rules.gosec.G301-1",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-732: Incorrect Permission Assignment for Critical Resource",
                                    "OWASP-A6: Security Misconfiguration"
                                ]
                            },
                            "shortDescription": {
                                "text": "Poor file permissions used when creating a directory\n"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "Go versions < 1.6.3 are vulnerable to Httpoxy attack: (CVE-2016-5386)\n"
                            },
                            "id": "semgrep_rules.gosec.G504-1",
                            "name": "semgrep_rules.gosec.G504-1",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                                    "OWASP-A9: Using Components with Known Vulnerabilities"
                                ]
                            },
                            "shortDescription": {
                                "text": "Go versions < 1.6.3 are vulnerable to Httpoxy attack: (CVE-2016-5386)\n"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "error"
                            },
                            "fullDescription": {
                                "text": "Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'."
                            },
                            "id": "semgrep_rules.jwt-none-alg",
                            "name": "semgrep_rules.jwt-none-alg",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                                    "OWASP-A2: Broken Authentication"
                                ]
                            },
                            "shortDescription": {
                                "text": "Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'."
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "Missing 'noopener' on an anchor tag where target='_blank'. This could introduce\na reverse tabnabbing vulnerability. Include 'noopener' when using target='_blank'.\n"
                            },
                            "id": "semgrep_rules.eslint.react-missing-noopener",
                            "name": "semgrep_rules.eslint.react-missing-noopener",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-200: Exposure of Sensitive Information to an Unauthorized Actor",
                                    "OWASP-A3: Sensitive Data Exposure"
                                ]
                            },
                            "shortDescription": {
                                "text": "Missing 'noopener' on an anchor tag where target='_blank'. This could introduce\na reverse tabnabbing vulnerability. Include 'noopener' when using target='_blank'.\n"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "Missing 'noopener' on an anchor tag where target='_blank'. This could introduce a reverse tabnabbing vulnerability. Include 'noopener' when using target='_blank'."
                            },
                            "id": "semgrep_rules.react-missing-noopener",
                            "name": "semgrep_rules.react-missing-noopener",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-200: Exposure of Sensitive Information to an Unauthorized Actor",
                                    "OWASP-A3: Sensitive Data Exposure"
                                ]
                            },
                            "shortDescription": {
                                "text": "Missing 'noopener' on an anchor tag where target='_blank'. This could introduce a reverse tabnabbing vulnerability. Include 'noopener' when using target='_blank'."
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "Detected usage of crypto.pseudoRandomBytes, which does not produce secure random numbers."
                            },
                            "id": "semgrep_rules.detect-pseudoRandomBytes",
                            "name": "semgrep_rules.detect-pseudoRandomBytes",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)",
                                    "OWASP-A9: Using Components with Known Vulnerabilities"
                                ]
                            },
                            "shortDescription": {
                                "text": "Detected usage of crypto.pseudoRandomBytes, which does not produce secure random numbers."
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "SQL query construction using string concatenation\n"
                            },
                            "id": "semgrep_rules.gosec.G202-1",
                            "name": "semgrep_rules.gosec.G202-1",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-89: Improper Neutralization of Special Elements used in an SQL Command"
                                ]
                            },
                            "shortDescription": {
                                "text": "SQL query construction using string concatenation\n"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "Detected the use of require(variable). Calling require with a non-literal argument might\nallow an attacker to load an run arbitrary code, or access arbitrary files.\n"
                            },
                            "id": "semgrep_rules.eslint.detect-non-literal-require",
                            "name": "semgrep_rules.eslint.detect-non-literal-require",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
                                    "OWASP-A1: Injection"
                                ]
                            },
                            "shortDescription": {
                                "text": "Detected the use of require(variable). Calling require with a non-literal argument might\nallow an attacker to load an run arbitrary code, or access arbitrary files.\n"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object."
                            },
                            "id": "semgrep_rules.prototype-pollution-loop",
                            "name": "semgrep_rules.prototype-pollution-loop",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes"
                                ]
                            },
                            "shortDescription": {
                                "text": "Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object."
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "String comparisons using '===', '!==', '!=' and '==' is vulnerable to timing attacks. More info: https://snyk.io/blog/node-js-timing-attack-ccc-ctf/"
                            },
                            "id": "semgrep_rules.eslint.detect-possible-timing-attacks",
                            "name": "semgrep_rules.eslint.detect-possible-timing-attacks",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-208: Observable Timing Discrepancy"
                                ]
                            },
                            "shortDescription": {
                                "text": "String comparisons using '===', '!==', '!=' and '==' is vulnerable to timing attacks. More info: https://snyk.io/blog/node-js-timing-attack-ccc-ctf/"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "error"
                            },
                            "fullDescription": {
                                "text": "Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'."
                            },
                            "id": "semgrep_rules.jwt-none-alg-1",
                            "name": "semgrep_rules.jwt-none-alg-1",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                                    "OWASP-A2: Broken Authentication"
                                ]
                            },
                            "shortDescription": {
                                "text": "Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'."
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "Pod is sharing the host IPC namespace. This allows container processes to communicate with processes on the host which reduces isolation and bypasses container protection models. Remove the 'hostIPC' key to disable this functionality."
                            },
                            "id": "semgrep_rules.hostipc-pod",
                            "name": "semgrep_rules.hostipc-pod",
                            "properties": {
                                "precision": "very-high",
                                "tags": []
                            },
                            "shortDescription": {
                                "text": "Pod is sharing the host IPC namespace. This allows container processes to communicate with processes on the host which reduces isolation and bypasses container protection models. Remove the 'hostIPC' key to disable this functionality."
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "CORS rule on bucket permits any origin"
                            },
                            "id": "semgrep_rules.all-origins-allowed",
                            "name": "semgrep_rules.all-origins-allowed",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-942: Permissive Cross-domain Policy with Untrusted Domains"
                                ]
                            },
                            "shortDescription": {
                                "text": "CORS rule on bucket permits any origin"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "Pod may use the node network namespace. This gives the pod access to the loopback device, services listening on localhost, and could be used to snoop on network activity of other pods on the same node. Remove the 'hostNetwork' key to disable this functionality."
                            },
                            "id": "semgrep_rules.hostnetwork-pod",
                            "name": "semgrep_rules.hostnetwork-pod",
                            "properties": {
                                "precision": "very-high",
                                "tags": []
                            },
                            "shortDescription": {
                                "text": "Pod may use the node network namespace. This gives the pod access to the loopback device, services listening on localhost, and could be used to snoop on network activity of other pods on the same node. Remove the 'hostNetwork' key to disable this functionality."
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "Implicit memory aliasing in for loop.\n"
                            },
                            "id": "semgrep_rules.gosec.G601-1",
                            "name": "semgrep_rules.gosec.G601-1",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-118: Incorrect Access of Indexable Resource ('Range Error')"
                                ]
                            },
                            "shortDescription": {
                                "text": "Implicit memory aliasing in for loop.\n"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "Found '$SPAWN' with '{shell: $SHELL}'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use '{shell: false}' instead."
                            },
                            "id": "semgrep_rules.spawn-shell-true",
                            "name": "semgrep_rules.spawn-shell-true",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
                                    "OWASP-A1: Injection"
                                ]
                            },
                            "shortDescription": {
                                "text": "Found '$SPAWN' with '{shell: $SHELL}'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use '{shell: false}' instead."
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "error"
                            },
                            "fullDescription": {
                                "text": "Password is exposed through JWT token payload. This is not encrypted and the password could be compromised. Do not store passwords in JWT tokens."
                            },
                            "id": "semgrep_rules.jwt-exposed-credentials-1",
                            "name": "semgrep_rules.jwt-exposed-credentials-1",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-522: Insufficiently Protected Credentials",
                                    "OWASP-A2: Broken Authentication"
                                ]
                            },
                            "shortDescription": {
                                "text": "Password is exposed through JWT token payload. This is not encrypted and the password could be compromised. Do not store passwords in JWT tokens."
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "Container allows for privilege escalation via setuid or setgid binaries. Add 'allowPrivilegeEscalation: false' in 'securityContext' to prevent this."
                            },
                            "id": "semgrep_rules.allow-privilege-escalation",
                            "name": "semgrep_rules.allow-privilege-escalation",
                            "properties": {
                                "precision": "very-high",
                                "tags": []
                            },
                            "shortDescription": {
                                "text": "Container allows for privilege escalation via setuid or setgid binaries. Add 'allowPrivilegeEscalation: false' in 'securityContext' to prevent this."
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "Audit use of command execution\n"
                            },
                            "id": "semgrep_rules.gosec.G204-1",
                            "name": "semgrep_rules.gosec.G204-1",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
                                    "OWASP-A1: Injection"
                                ]
                            },
                            "shortDescription": {
                                "text": "Audit use of command execution\n"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "Poor file permissions used when creation file or using chmod\n"
                            },
                            "id": "semgrep_rules.gosec.G302-1",
                            "name": "semgrep_rules.gosec.G302-1",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-732: Incorrect Permission Assignment for Critical Resource",
                                    "OWASP-A6: Security Misconfiguration"
                                ]
                            },
                            "shortDescription": {
                                "text": "Poor file permissions used when creation file or using chmod\n"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "Detected usage of crypto.pseudoRandomBytes, which does not produce secure random numbers.\n"
                            },
                            "id": "semgrep_rules.eslint.detect-pseudoRandomBytes",
                            "name": "semgrep_rules.eslint.detect-pseudoRandomBytes",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)"
                                ]
                            },
                            "shortDescription": {
                                "text": "Detected usage of crypto.pseudoRandomBytes, which does not produce secure random numbers.\n"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "Container is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'readOnlyRootFilesystem: true' to this container to prevent this."
                            },
                            "id": "semgrep_rules.writable-filesystem-container",
                            "name": "semgrep_rules.writable-filesystem-container",
                            "properties": {
                                "precision": "very-high",
                                "tags": []
                            },
                            "shortDescription": {
                                "text": "Container is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'readOnlyRootFilesystem: true' to this container to prevent this."
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "Encryption at rest is not enabled for the elastic search domain resource"
                            },
                            "id": "semgrep_rules.elastic-search-encryption-at-rest",
                            "name": "semgrep_rules.elastic-search-encryption-at-rest",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-311: Missing Encryption of Sensitive Data"
                                ]
                            },
                            "shortDescription": {
                                "text": "Encryption at rest is not enabled for the elastic search domain resource"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "The SHA-1 message-digest algorithm has been cryptographically broken and\nis unsuitable for further use. It is recommended that the SHA-3, or BLAKE2 family\nof algorithms be used for non*** cryptographic hashes instead. For\npassword based cryptographic hashes, consider using the bcrypt or Argon2 family\nof cryptographic hashes.\n"
                            },
                            "id": "semgrep_rules.gosec.G505-1",
                            "name": "semgrep_rules.gosec.G505-1",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                                    "OWASP-A9: Using Components with Known Vulnerabilities"
                                ]
                            },
                            "shortDescription": {
                                "text": "The SHA-1 message-digest algorithm has been cryptographically broken and\nis unsuitable for further use. It is recommended that the SHA-3, or BLAKE2 family\nof algorithms be used for non*** cryptographic hashes instead. For\npassword based cryptographic hashes, consider using the bcrypt or Argon2 family\nof cryptographic hashes.\n"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "error"
                            },
                            "fullDescription": {
                                "text": "Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables: process.env.SECRET)"
                            },
                            "id": "semgrep_rules.hardcoded-jwt-secret-1",
                            "name": "semgrep_rules.hardcoded-jwt-secret-1",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-522: Insufficiently Protected Credentials",
                                    "OWASP-A2: Broken Authentication"
                                ]
                            },
                            "shortDescription": {
                                "text": "Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables: process.env.SECRET)"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "Container or pod is running in privileged mode. This grants the container the equivalent of root capabilities on the host machine. This can lead to container escapes, privilege escalation, and other security concerns. Remove the 'privileged' key to disable this capability."
                            },
                            "id": "semgrep_rules.privileged-container",
                            "name": "semgrep_rules.privileged-container",
                            "properties": {
                                "precision": "very-high",
                                "tags": []
                            },
                            "shortDescription": {
                                "text": "Container or pod is running in privileged mode. This grants the container the equivalent of root capabilities on the host machine. This can lead to container escapes, privilege escalation, and other security concerns. Remove the 'privileged' key to disable this capability."
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "error"
                            },
                            "fullDescription": {
                                "text": "Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables: process.env.SECRET)"
                            },
                            "id": "semgrep_rules.hardcoded-jwt-secret",
                            "name": "semgrep_rules.hardcoded-jwt-secret",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-522: Insufficiently Protected Credentials",
                                    "OWASP-A2: Broken Authentication"
                                ]
                            },
                            "shortDescription": {
                                "text": "Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables: process.env.SECRET)"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "This anchor tag with 'target=\"_blank\"' is missing 'noreferrer'. A page opened with 'target=\"_blank\"' can access the window object of the origin page. This means it can manipulate the 'window.opener' property, which could redirect the origin page to a malicious URL. This is called reverse tabnabbing. To prevent this, include 'rel=noreferrer' on this tag."
                            },
                            "id": "semgrep_rules.react-missing-noreferrer",
                            "name": "semgrep_rules.react-missing-noreferrer",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-200: Exposure of Sensitive Information to an Unauthorized Actor",
                                    "OWASP-A3: Sensitive Data Exposure"
                                ]
                            },
                            "shortDescription": {
                                "text": "This anchor tag with 'target=\"_blank\"' is missing 'noreferrer'. A page opened with 'target=\"_blank\"' can access the window object of the origin page. This means it can manipulate the 'window.opener' property, which could redirect the origin page to a malicious URL. This is called reverse tabnabbing. To prevent this, include 'rel=noreferrer' on this tag."
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "Potential DoS vulnerability via decompression bomb\n"
                            },
                            "id": "semgrep_rules.gosec.G110-1",
                            "name": "semgrep_rules.gosec.G110-1",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-409: Improper Handling of Highly Compressed Data"
                                ]
                            },
                            "shortDescription": {
                                "text": "Potential DoS vulnerability via decompression bomb\n"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "Possibility of prototype polluting assignment detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object."
                            },
                            "id": "semgrep_rules.prototype-pollution-assignment",
                            "name": "semgrep_rules.prototype-pollution-assignment",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes"
                                ]
                            },
                            "shortDescription": {
                                "text": "Possibility of prototype polluting assignment detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object."
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "error"
                            },
                            "fullDescription": {
                                "text": "Hardcoded secret used for Passport Strategy. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables: process.env.SECRET)"
                            },
                            "id": "semgrep_rules.hardcoded-passport-secret",
                            "name": "semgrep_rules.hardcoded-passport-secret",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-522: Insufficiently Protected Credentials",
                                    "OWASP-A2: Broken Authentication"
                                ]
                            },
                            "shortDescription": {
                                "text": "Hardcoded secret used for Passport Strategy. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables: process.env.SECRET)"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "Pod is sharing the host process ID namespace. When paired with ptrace this can be used to escalate privileges outside of the container. Remove the 'hostPID' key to disable this functionality."
                            },
                            "id": "semgrep_rules.hostpid-pod",
                            "name": "semgrep_rules.hostpid-pod",
                            "properties": {
                                "precision": "very-high",
                                "tags": []
                            },
                            "shortDescription": {
                                "text": "Pod is sharing the host process ID namespace. When paired with ptrace this can be used to escalate privileges outside of the container. Remove the 'hostPID' key to disable this functionality."
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "A variable is present in the filename argument of fs calls, this might allow an attacker to access anything on your system."
                            },
                            "id": "semgrep_rules.detect-non-literal-fs-filename",
                            "name": "semgrep_rules.detect-non-literal-fs-filename",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
                                ]
                            },
                            "shortDescription": {
                                "text": "A variable is present in the filename argument of fs calls, this might allow an attacker to access anything on your system."
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "Audit the use of ssh.InsecureIgnoreHostKey\n"
                            },
                            "id": "semgrep_rules.gosec.G106-1",
                            "name": "semgrep_rules.gosec.G106-1",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-322: Key Exchange without Entity Authentication"
                                ]
                            },
                            "shortDescription": {
                                "text": "Audit the use of ssh.InsecureIgnoreHostKey\n"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "Ensure IAM policies don't allow credentials exposure. Credentials exposure actions return credentials as part of the API response, and can possibly lead to leaking important credentials. Instead, use another action that doesn't return sensitive data as part of the API response."
                            },
                            "id": "semgrep_rules.no-iam-creds-exposure",
                            "name": "semgrep_rules.no-iam-creds-exposure",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-200: Exposure of Sensitive Information to an Unauthorized Actor"
                                ]
                            },
                            "shortDescription": {
                                "text": "Ensure IAM policies don't allow credentials exposure. Credentials exposure actions return credentials as part of the API response, and can possibly lead to leaking important credentials. Instead, use another action that doesn't return sensitive data as part of the API response."
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "Storing JWT tokens in localStorage known to be a bad practice, consider moving your tokens from localStorage to a HTTP cookie."
                            },
                            "id": "semgrep_rules.react-jwt-in-localstorage",
                            "name": "semgrep_rules.react-jwt-in-localstorage",
                            "properties": {
                                "precision": "very-high",
                                "tags": []
                            },
                            "shortDescription": {
                                "text": "Storing JWT tokens in localStorage known to be a bad practice, consider moving your tokens from localStorage to a HTTP cookie."
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "User controlled data in a insertAdjacentHTML, document.write or document.writeln is an anti-pattern that can lead to XSS vulnerabilities"
                            },
                            "id": "semgrep_rules.react-unsanitized-method",
                            "name": "semgrep_rules.react-unsanitized-method",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
                                    "OWASP-A7: Cross-Site Scripting (XSS)"
                                ]
                            },
                            "shortDescription": {
                                "text": "User controlled data in a insertAdjacentHTML, document.write or document.writeln is an anti-pattern that can lead to XSS vulnerabilities"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "Container allows for running applications as root. This can result in privilege escalation attacks. Add 'runAsNonRoot: true' in 'securityContext' to prevent this."
                            },
                            "id": "semgrep_rules.run-as-non-root",
                            "name": "semgrep_rules.run-as-non-root",
                            "properties": {
                                "precision": "very-high",
                                "tags": []
                            },
                            "shortDescription": {
                                "text": "Container allows for running applications as root. This can result in privilege escalation attacks. Add 'runAsNonRoot: true' in 'securityContext' to prevent this."
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "File open from tainted variable\n"
                            },
                            "id": "semgrep_rules.gosec.G304-1",
                            "name": "semgrep_rules.gosec.G304-1",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
                                ]
                            },
                            "shortDescription": {
                                "text": "File open from tainted variable\n"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "User controlled data in <Redirect /> can lead to unpredicted redirects."
                            },
                            "id": "semgrep_rules.react-router-redirect",
                            "name": "semgrep_rules.react-router-redirect",
                            "properties": {
                                "precision": "very-high",
                                "tags": []
                            },
                            "shortDescription": {
                                "text": "User controlled data in <Redirect /> can lead to unpredicted redirects."
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "Detected eval(variable), which could allow a malicious actor to run arbitrary code.\n"
                            },
                            "id": "semgrep_rules.eslint.detect-eval-with-expression",
                            "name": "semgrep_rules.eslint.detect-eval-with-expression",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
                                    "OWASP-A1: Injection"
                                ]
                            },
                            "shortDescription": {
                                "text": "Detected eval(variable), which could allow a malicious actor to run arbitrary code.\n"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "S3 bucket with public read access detected."
                            },
                            "id": "semgrep_rules.s3-public-read-bucket",
                            "name": "semgrep_rules.s3-public-read-bucket",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-200: Exposure of Sensitive Information to an Unauthorized Actor"
                                ]
                            },
                            "shortDescription": {
                                "text": "S3 bucket with public read access detected."
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "error"
                            },
                            "fullDescription": {
                                "text": "S3 bucket with public read-write access detected."
                            },
                            "id": "semgrep_rules.s3-public-rw-bucket",
                            "name": "semgrep_rules.s3-public-rw-bucket",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-200: Exposure of Sensitive Information to an Unauthorized Actor"
                                ]
                            },
                            "shortDescription": {
                                "text": "S3 bucket with public read-write access detected."
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "The object is passed strictly to jose.JWT.sign(...) Make sure that sensitive information is not exposed through JWT token payload."
                            },
                            "id": "semgrep_rules.jose-exposed-data",
                            "name": "semgrep_rules.jose-exposed-data",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-522: Insufficiently Protected Credentials",
                                    "OWASP-A3: Sensitive Data Exposure"
                                ]
                            },
                            "shortDescription": {
                                "text": "The object is passed strictly to jose.JWT.sign(...) Make sure that sensitive information is not exposed through JWT token payload."
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "Detected usage of noassert in Buffer API, which allows the offset the be beyond the end of the buffer. This could result in writing or reading beyond the end of the buffer."
                            },
                            "id": "semgrep_rules.detect-buffer-noassert",
                            "name": "semgrep_rules.detect-buffer-noassert",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer"
                                ]
                            },
                            "shortDescription": {
                                "text": "Detected usage of noassert in Buffer API, which allows the offset the be beyond the end of the buffer. This could result in writing or reading beyond the end of the buffer."
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "Detected non-literal calls to $EXEC(). This could lead to a command injection vulnerability."
                            },
                            "id": "semgrep_rules.dangerous-spawn-shell",
                            "name": "semgrep_rules.dangerous-spawn-shell",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
                                    "OWASP-A1: Injection"
                                ]
                            },
                            "shortDescription": {
                                "text": "Detected non-literal calls to $EXEC(). This could lead to a command injection vulnerability."
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "The object is passed strictly to jsonwebtoken.sign(...) Make sure that sensitive information is not exposed through JWT token payload."
                            },
                            "id": "semgrep_rules.jwt-exposed-data",
                            "name": "semgrep_rules.jwt-exposed-data",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-522: Insufficiently Protected Credentials",
                                    "OWASP-A3: Sensitive Data Exposure"
                                ]
                            },
                            "shortDescription": {
                                "text": "The object is passed strictly to jsonwebtoken.sign(...) Make sure that sensitive information is not exposed through JWT token payload."
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "Detected usage of noassert in Buffer API, which allows the offset the be beyond the\nend of the buffer. This could result in writing or reading beyond the end of the buffer.\n"
                            },
                            "id": "semgrep_rules.eslint.detect-buffer-noassert",
                            "name": "semgrep_rules.eslint.detect-buffer-noassert",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer"
                                ]
                            },
                            "shortDescription": {
                                "text": "Detected usage of noassert in Buffer API, which allows the offset the be beyond the\nend of the buffer. This could result in writing or reading beyond the end of the buffer.\n"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "Ensure IAM policies don't allow resource exposure. These actions can expose AWS resources to the public. For example `ecr:SetRepositoryPolicy` could let an attacker retrieve container images. Instead, use another action that doesn't expose AWS resources."
                            },
                            "id": "semgrep_rules.no-iam-resource-exposure",
                            "name": "semgrep_rules.no-iam-resource-exposure",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-200: Exposure of Sensitive Information to an Unauthorized Actor"
                                ]
                            },
                            "shortDescription": {
                                "text": "Ensure IAM policies don't allow resource exposure. These actions can expose AWS resources to the public. For example `ecr:SetRepositoryPolicy` could let an attacker retrieve container images. Instead, use another action that doesn't expose AWS resources."
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "Binding to all network interfaces can potentially open up a service to\ntraffic on unintended interfaces, that may not be properly documented or\nsecured. This plugin test looks for a string pattern \u201c0.0.0.0\u201d that may\nindicate a hardcoded binding to all network interfaces.\n"
                            },
                            "id": "semgrep_rules.gosec.G102-1",
                            "name": "semgrep_rules.gosec.G102-1",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-200: Exposure of Sensitive Information to an Unauthorized Actor",
                                    "OWASP-A6: Security Misconfiguration"
                                ]
                            },
                            "shortDescription": {
                                "text": "Binding to all network interfaces can potentially open up a service to\ntraffic on unintended interfaces, that may not be properly documented or\nsecured. This plugin test looks for a string pattern \u201c0.0.0.0\u201d that may\nindicate a hardcoded binding to all network interfaces.\n"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "User controlled data in a styled component's css is an anti-pattern that can lead to XSS vulnerabilities"
                            },
                            "id": "semgrep_rules.react-styled-components-injection",
                            "name": "semgrep_rules.react-styled-components-injection",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
                                    "OWASP-A7: Cross-Site Scripting (XSS)"
                                ]
                            },
                            "shortDescription": {
                                "text": "User controlled data in a styled component's css is an anti-pattern that can lead to XSS vulnerabilities"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "IAM policies that allow full \"*-*\" admin privileges violates the principle of least privilege. This allows an attacker to take full control over all AWS account resources. Instead, give each user more fine-grained control with only the privileges they need. $TYPE"
                            },
                            "id": "semgrep_rules.no-iam-admin-privileges",
                            "name": "semgrep_rules.no-iam-admin-privileges",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-269: Improper Privilege Management"
                                ]
                            },
                            "shortDescription": {
                                "text": "IAM policies that allow full \"*-*\" admin privileges violates the principle of least privilege. This allows an attacker to take full control over all AWS account resources. Instead, give each user more fine-grained control with only the privileges they need. $TYPE"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "A variable is present in the filename argument of fs calls, this might allow an attacker to access anything on your system.\n"
                            },
                            "id": "semgrep_rules.eslint.detect-non-literal-fs-filename",
                            "name": "semgrep_rules.eslint.detect-non-literal-fs-filename",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
                                ]
                            },
                            "shortDescription": {
                                "text": "A variable is present in the filename argument of fs calls, this might allow an attacker to access anything on your system.\n"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "Cannot determine what '$UNK' is and it is used with a '<script>' tag. This could be susceptible to cross-site scripting (XSS). Ensure '$UNK' is not externally controlled, or sanitize this data."
                            },
                            "id": "semgrep_rules.unknown-value-with-script-tag",
                            "name": "semgrep_rules.unknown-value-with-script-tag",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
                                    "OWASP-A7: Cross-Site Scripting (XSS)"
                                ]
                            },
                            "shortDescription": {
                                "text": "Cannot determine what '$UNK' is and it is used with a '<script>' tag. This could be susceptible to cross-site scripting (XSS). Ensure '$UNK' is not externally controlled, or sanitize this data."
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "Ensure that IAM policies with permissions on other users don't allow for privilege escalation. This can lead to an attacker gaining full administrator access of AWS accounts. Instead, specify which user the permission should be used on or do not use the listed actions. $RESOURCE"
                            },
                            "id": "semgrep_rules.no-iam-priv-esc-other-users",
                            "name": "semgrep_rules.no-iam-priv-esc-other-users",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-269: Improper Privilege Management"
                                ]
                            },
                            "shortDescription": {
                                "text": "Ensure that IAM policies with permissions on other users don't allow for privilege escalation. This can lead to an attacker gaining full administrator access of AWS accounts. Instead, specify which user the permission should be used on or do not use the listed actions. $RESOURCE"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "Detected string concatenation with a non-literal variable in a node-postgres JS SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, used parameterized queries or prepared statements instead. You can use parameterized statements like so: `client.query('SELECT $1 from table', [userinput])`"
                            },
                            "id": "semgrep_rules.node-postgres-sqli",
                            "name": "semgrep_rules.node-postgres-sqli",
                            "properties": {
                                "precision": "very-high",
                                "tags": []
                            },
                            "shortDescription": {
                                "text": "Detected string concatenation with a non-literal variable in a node-postgres JS SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, used parameterized queries or prepared statements instead. You can use parameterized statements like so: `client.query('SELECT $1 from table', [userinput])`"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "Detected eval(variable), which could allow a malicious actor to run arbitrary code."
                            },
                            "id": "semgrep_rules.detect-eval-with-expression",
                            "name": "semgrep_rules.detect-eval-with-expression",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
                                    "OWASP-A1: Injection"
                                ]
                            },
                            "shortDescription": {
                                "text": "Detected eval(variable), which could allow a malicious actor to run arbitrary code."
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "Detected non-literal calls to child_process.exec(). This could lead to a command\ninjection vulnerability.\n"
                            },
                            "id": "semgrep_rules.eslint.detect-child-process",
                            "name": "semgrep_rules.eslint.detect-child-process",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
                                    "OWASP-A1: Injection"
                                ]
                            },
                            "shortDescription": {
                                "text": "Detected non-literal calls to child_process.exec(). This could lead to a command\ninjection vulnerability.\n"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "error"
                            },
                            "fullDescription": {
                                "text": "Git allows shell commands to be specified in ext URLs for remote repositories. For example, git clone 'ext::sh -c whoami% >&2' will execute the whoami command to try to connect to a remote repository. Make sure that the URL is not controlled by external input."
                            },
                            "id": "semgrep_rules.spawn-git-clone",
                            "name": "semgrep_rules.spawn-git-clone",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
                                    "OWASP-A1: Injection"
                                ]
                            },
                            "shortDescription": {
                                "text": "Git allows shell commands to be specified in ext URLs for remote repositories. For example, git clone 'ext::sh -c whoami% >&2' will execute the whoami command to try to connect to a remote repository. Make sure that the URL is not controlled by external input."
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "`ref` usage found. refs give direct DOM access and may create a possibility for XSS,  which could cause sensitive information such as user cookies to be retrieved by an attacker.  Instead, avoid direct DOM manipulation or  use DOMPurify to sanitize HTML before writing it into the page."
                            },
                            "id": "semgrep_rules.react-no-refs",
                            "name": "semgrep_rules.react-no-refs",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
                                    "OWASP-A7: Cross-Site Scripting (XSS)"
                                ]
                            },
                            "shortDescription": {
                                "text": "`ref` usage found. refs give direct DOM access and may create a possibility for XSS,  which could cause sensitive information such as user cookies to be retrieved by an attacker.  Instead, avoid direct DOM manipulation or  use DOMPurify to sanitize HTML before writing it into the page."
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "error"
                            },
                            "fullDescription": {
                                "text": "Unencrypted request over HTTP detected."
                            },
                            "id": "semgrep_rules.react-insecure-request",
                            "name": "semgrep_rules.react-insecure-request",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-319: Cleartext Transmission of Sensitive Information",
                                    "OWASP-A3: Sensitive Data Exposure"
                                ]
                            },
                            "shortDescription": {
                                "text": "Unencrypted request over HTTP detected."
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "Detected use of express.csrf() middleware before express.methodOverride(). This can\nallow GET requests (which are not checked by csrf) to turn into POST requests later.\n"
                            },
                            "id": "semgrep_rules.eslint.detect-no-csrf-before-method-override",
                            "name": "semgrep_rules.eslint.detect-no-csrf-before-method-override",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-352: Cross-Site Request Forgery (CSRF)"
                                ]
                            },
                            "shortDescription": {
                                "text": "Detected use of express.csrf() middleware before express.methodOverride(). This can\nallow GET requests (which are not checked by csrf) to turn into POST requests later.\n"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "The ECR Repository isn't configured to scan images on push"
                            },
                            "id": "semgrep_rules.ecr-image-scan-on-push",
                            "name": "semgrep_rules.ecr-image-scan-on-push",
                            "properties": {
                                "precision": "very-high",
                                "tags": []
                            },
                            "shortDescription": {
                                "text": "The ECR Repository isn't configured to scan images on push"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "error"
                            },
                            "fullDescription": {
                                "text": "Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections."
                            },
                            "id": "semgrep_rules.detect-insecure-websocket",
                            "name": "semgrep_rules.detect-insecure-websocket",
                            "properties": {
                                "precision": "very-high",
                                "tags": []
                            },
                            "shortDescription": {
                                "text": "Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections."
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "Property decoded from JWT token without verifying and cannot be trustworthy."
                            },
                            "id": "semgrep_rules.react-jwt-decoded-property",
                            "name": "semgrep_rules.react-jwt-decoded-property",
                            "properties": {
                                "precision": "very-high",
                                "tags": []
                            },
                            "shortDescription": {
                                "text": "Property decoded from JWT token without verifying and cannot be trustworthy."
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "File creation in shared tmp directory without using ioutil.Tempfile\n"
                            },
                            "id": "semgrep_rules.gosec.G303-1",
                            "name": "semgrep_rules.gosec.G303-1",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-378: Creation of Temporary File With Insecure Permissions"
                                ]
                            },
                            "shortDescription": {
                                "text": "File creation in shared tmp directory without using ioutil.Tempfile\n"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "Use of weak random number generator (math/rand instead of crypto/rand)\n"
                            },
                            "id": "semgrep_rules.gosec.G404-1",
                            "name": "semgrep_rules.gosec.G404-1",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)",
                                    "OWASP-A3: Sensitive Data Exposure"
                                ]
                            },
                            "shortDescription": {
                                "text": "Use of weak random number generator (math/rand instead of crypto/rand)\n"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "The vpc_config resource inside the eks cluster has not explicitly disabled public endpoint access"
                            },
                            "id": "semgrep_rules.eks-public-endpoint-enabled",
                            "name": "semgrep_rules.eks-public-endpoint-enabled",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-200: Exposure of Sensitive Information to an Unauthorized Actor"
                                ]
                            },
                            "shortDescription": {
                                "text": "The vpc_config resource inside the eks cluster has not explicitly disabled public endpoint access"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "Use of unescaped data in HTML templates\n"
                            },
                            "id": "semgrep_rules.gosec.G203-1",
                            "name": "semgrep_rules.gosec.G203-1",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-79: Improper Neutralization of Input During Web Page Generation"
                                ]
                            },
                            "shortDescription": {
                                "text": "Use of unescaped data in HTML templates\n"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "error"
                            },
                            "fullDescription": {
                                "text": "Potential Integer overflow made by strconv.Atoi result conversion to int16/32\n"
                            },
                            "id": "semgrep_rules.gosec.G109-1",
                            "name": "semgrep_rules.gosec.G109-1",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-190: Integer Overflow or Wraparound"
                                ]
                            },
                            "shortDescription": {
                                "text": "Potential Integer overflow made by strconv.Atoi result conversion to int16/32\n"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "If unverified user data can reach the `exec` method it can result in Remote Code Execution"
                            },
                            "id": "semgrep_rules.shelljs-exec-injection",
                            "name": "semgrep_rules.shelljs-exec-injection",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
                                    "OWASP-A1: Injection"
                                ]
                            },
                            "shortDescription": {
                                "text": "If unverified user data can reach the `exec` method it can result in Remote Code Execution"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "Detected the decoding of a JWT token without a verify step. JWT tokens must be verified before use, otherwise the token's integrity is unknown. This means a malicious actor could forge a JWT token with any claims. Call '.verify()' before using the token."
                            },
                            "id": "semgrep_rules.jwt-decode-without-verify",
                            "name": "semgrep_rules.jwt-decode-without-verify",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-345: Insufficient Verification of Data Authenticity",
                                    "OWASP-A2: Broken Authentication"
                                ]
                            },
                            "shortDescription": {
                                "text": "Detected the decoding of a JWT token without a verify step. JWT tokens must be verified before use, otherwise the token's integrity is unknown. This means a malicious actor could forge a JWT token with any claims. Call '.verify()' before using the token."
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "error"
                            },
                            "fullDescription": {
                                "text": "Profiling endpoint automatically exposed on /debug/pprof\n"
                            },
                            "id": "semgrep_rules.gosec.G108-1",
                            "name": "semgrep_rules.gosec.G108-1",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-200: Exposure of Sensitive Information to an Unauthorized Actor"
                                ]
                            },
                            "shortDescription": {
                                "text": "Profiling endpoint automatically exposed on /debug/pprof\n"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "RegExp() called with a variable, this might allow an attacker to DOS your application with a long-running regular expression."
                            },
                            "id": "semgrep_rules.detect-non-literal-regexp",
                            "name": "semgrep_rules.detect-non-literal-regexp",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-185: Incorrect Regular Expression"
                                ]
                            },
                            "shortDescription": {
                                "text": "RegExp() called with a variable, this might allow an attacker to DOS your application with a long-running regular expression."
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "The MD5 message-digest algorithm has been cryptographically broken and is unsuitable for\nfurther use. It is recommended that the SHA-3, or BLAKE2 family of algorithms be used for\nnon*** cryptographic hashes instead. For password based cryptographic hashes,\nconsider using the bcrypt or Argon2 family of cryptographic hashes.\n"
                            },
                            "id": "semgrep_rules.gosec.G501-1",
                            "name": "semgrep_rules.gosec.G501-1",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                                    "OWASP-A9: Using Components with Known Vulnerabilities"
                                ]
                            },
                            "shortDescription": {
                                "text": "The MD5 message-digest algorithm has been cryptographically broken and is unsuitable for\nfurther use. It is recommended that the SHA-3, or BLAKE2 family of algorithms be used for\nnon*** cryptographic hashes instead. For password based cryptographic hashes,\nconsider using the bcrypt or Argon2 family of cryptographic hashes.\n"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "Url provided to HTTP request as taint input\n"
                            },
                            "id": "semgrep_rules.gosec.G104-1.G107-1",
                            "name": "semgrep_rules.gosec.G104-1.G107-1",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-88: Improper Neutralization of Argument Delimiters in a Command"
                                ]
                            },
                            "shortDescription": {
                                "text": "Url provided to HTTP request as taint input\n"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "This HTML element '$EL' and attribute '$ATTR' together may load an external resource. This means that if dynamic content can enter this attribute it may be possible for an attacker to send HTTP requests to unintended locations which may leak data about your users. If this element is reaching out to a known host, consider hardcoding the host (or loading from a configuration) and appending the dynamic path. See https://github.com/cure53/HTTPLeaks for more information."
                            },
                            "id": "semgrep_rules.react-http-leak",
                            "name": "semgrep_rules.react-http-leak",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-200: Exposure of Sensitive Information to an Unauthorized Actor",
                                    "OWASP-A3: Sensitive Data Exposure"
                                ]
                            },
                            "shortDescription": {
                                "text": "This HTML element '$EL' and attribute '$ATTR' together may load an external resource. This means that if dynamic content can enter this attribute it may be possible for an attacker to send HTTP requests to unintended locations which may leak data about your users. If this element is reaching out to a known host, consider hardcoding the host (or loading from a configuration) and appending the dynamic path. See https://github.com/cure53/HTTPLeaks for more information."
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "Exposing host's Docker socket to containers via a volume. The owner of this socket is root. Giving someone access to it is equivalent to giving unrestricted root access to your host. Remove 'docker.sock' from hostpath to prevent this."
                            },
                            "id": "semgrep_rules.exposing-docker-socket-hostpath",
                            "name": "semgrep_rules.exposing-docker-socket-hostpath",
                            "properties": {
                                "precision": "very-high",
                                "tags": []
                            },
                            "shortDescription": {
                                "text": "Exposing host's Docker socket to containers via a volume. The owner of this socket is root. Giving someone access to it is equivalent to giving unrestricted root access to your host. Remove 'docker.sock' from hostpath to prevent this."
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "Expect WriteFile permissions to be 600 or less\n"
                            },
                            "id": "semgrep_rules.gosec.G306-1",
                            "name": "semgrep_rules.gosec.G306-1",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-276: Incorrect Default Permissions"
                                ]
                            },
                            "shortDescription": {
                                "text": "Expect WriteFile permissions to be 600 or less\n"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "`serialize-javascript` used with `unsafe` parameter, this could be vulnerable to XSS."
                            },
                            "id": "semgrep_rules.unsafe-serialize-javascript",
                            "name": "semgrep_rules.unsafe-serialize-javascript",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page",
                                    "OWASP-A1: Injection"
                                ]
                            },
                            "shortDescription": {
                                "text": "`serialize-javascript` used with `unsafe` parameter, this could be vulnerable to XSS."
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "error"
                            },
                            "fullDescription": {
                                "text": "The last user in the container is 'root'. This is a security hazard because if an attacker gains control of the container they will have root access. Switch back to another user after running commands as 'root'."
                            },
                            "id": "semgrep_rules.last-user-is-root",
                            "name": "semgrep_rules.last-user-is-root",
                            "properties": {
                                "precision": "very-high",
                                "tags": []
                            },
                            "shortDescription": {
                                "text": "The last user in the container is 'root'. This is a security hazard because if an attacker gains control of the container they will have root access. Switch back to another user after running commands as 'root'."
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object."
                            },
                            "id": "semgrep_rules.prototype-pollution-function",
                            "name": "semgrep_rules.prototype-pollution-function",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes"
                                ]
                            },
                            "shortDescription": {
                                "text": "Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object."
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "File traversal when extracting zip/tar archive\n"
                            },
                            "id": "semgrep_rules.gosec.G305-1",
                            "name": "semgrep_rules.gosec.G305-1",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
                                ]
                            },
                            "shortDescription": {
                                "text": "File traversal when extracting zip/tar archive\n"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "Cluster is disabling TLS certificate verification when communicating with the server. This makes your HTTPS connections insecure. Remove the 'insecure-skip-tls-verify: true' key to secure communication."
                            },
                            "id": "semgrep_rules.skip-tls-verify-cluster",
                            "name": "semgrep_rules.skip-tls-verify-cluster",
                            "properties": {
                                "precision": "very-high",
                                "tags": []
                            },
                            "shortDescription": {
                                "text": "Cluster is disabling TLS certificate verification when communicating with the server. This makes your HTTPS connections insecure. Remove the 'insecure-skip-tls-verify: true' key to secure communication."
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "Setting HTML from code is risky because it\u2019s easy to inadvertently expose your users to a cross-site scripting (XSS) attack.\n"
                            },
                            "id": "semgrep_rules.eslint.react-dangerouslysetinnerhtml",
                            "name": "semgrep_rules.eslint.react-dangerouslysetinnerhtml",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
                                    "OWASP-A7: Cross-site Scripting (XSS)"
                                ]
                            },
                            "shortDescription": {
                                "text": "Setting HTML from code is risky because it\u2019s easy to inadvertently expose your users to a cross-site scripting (XSS) attack.\n"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "Overwriting `transformLinkUri` or `transformImageUri` to something insecure or turning `allowDangerousHtml` on, will open code up to XSS vectors."
                            },
                            "id": "semgrep_rules.react-markdown-insecure-html",
                            "name": "semgrep_rules.react-markdown-insecure-html",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
                                    "OWASP-A7: Cross-Site Scripting (XSS)"
                                ]
                            },
                            "shortDescription": {
                                "text": "Overwriting `transformLinkUri` or `transformImageUri` to something insecure or turning `allowDangerousHtml` on, will open code up to XSS vectors."
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "Service is disabling TLS certificate verification when communicating with the server. This makes your HTTPS connections insecure. Remove the 'insecureSkipTLSVerify: true' key to secure communication."
                            },
                            "id": "semgrep_rules.skip-tls-verify-service",
                            "name": "semgrep_rules.skip-tls-verify-service",
                            "properties": {
                                "precision": "very-high",
                                "tags": []
                            },
                            "shortDescription": {
                                "text": "Service is disabling TLS certificate verification when communicating with the server. This makes your HTTPS connections insecure. Remove the 'insecureSkipTLSVerify: true' key to secure communication."
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "Ensure that groups of actions that include iam:PassRole and could result in privilege escalation are not all allowed for the same user. These actions could result in an attacker gaining full admin access of an AWS account. Try not to use these actions in conjuction."
                            },
                            "id": "semgrep_rules.no-iam-priv-esc-roles",
                            "name": "semgrep_rules.no-iam-priv-esc-roles",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-269: Improper Privilege Management"
                                ]
                            },
                            "shortDescription": {
                                "text": "Ensure that groups of actions that include iam:PassRole and could result in privilege escalation are not all allowed for the same user. These actions could result in an attacker gaining full admin access of an AWS account. Try not to use these actions in conjuction."
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "User controlled data in a `$X` is an anti-pattern that can lead to XSS vulnerabilities"
                            },
                            "id": "semgrep_rules.react-unsanitized-property",
                            "name": "semgrep_rules.react-unsanitized-property",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
                                    "OWASP-A7: Cross-Site Scripting (XSS)"
                                ]
                            },
                            "shortDescription": {
                                "text": "User controlled data in a `$X` is an anti-pattern that can lead to XSS vulnerabilities"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "RegExp() called with a variable, this might allow an attacker to DOS your application with a long-running regular expression.\n"
                            },
                            "id": "semgrep_rules.eslint.detect-non-literal-regexp",
                            "name": "semgrep_rules.eslint.detect-non-literal-regexp",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-185: Incorrect Regular Expression"
                                ]
                            },
                            "shortDescription": {
                                "text": "RegExp() called with a variable, this might allow an attacker to DOS your application with a long-running regular expression.\n"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "note"
                            },
                            "fullDescription": {
                                "text": "Non-constant SQL query detected. Ensure this is not controlled by external data, otherwise this is a SQL injection."
                            },
                            "id": "semgrep_rules.non-constant-sql-query",
                            "name": "semgrep_rules.non-constant-sql-query",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                                    "OWASP-A1: Injection"
                                ]
                            },
                            "shortDescription": {
                                "text": "Non-constant SQL query detected. Ensure this is not controlled by external data, otherwise this is a SQL injection."
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "It is a good practice to avoid spreading for JSX attributes. This prevents accidentally passing `dangerouslySetInnerHTML` to an element."
                            },
                            "id": "semgrep_rules.react-html-element-spreading",
                            "name": "semgrep_rules.react-html-element-spreading",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
                                    "OWASP-A7: Cross-Site Scripting (XSS)"
                                ]
                            },
                            "shortDescription": {
                                "text": "It is a good practice to avoid spreading for JSX attributes. This prevents accidentally passing `dangerouslySetInnerHTML` to an element."
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "Container is explicitly disabling seccomp confinement. This runs the service in an unrestricted state. Remove 'seccompProfile: unconfined' to prevent this."
                            },
                            "id": "semgrep_rules.seccomp-confinement-disabled",
                            "name": "semgrep_rules.seccomp-confinement-disabled",
                            "properties": {
                                "precision": "very-high",
                                "tags": []
                            },
                            "shortDescription": {
                                "text": "Container is explicitly disabling seccomp confinement. This runs the service in an unrestricted state. Remove 'seccompProfile: unconfined' to prevent this."
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "Usage of a cryptographically broken primitive has been detected. It is recommended that \nChaCha20 or Advanced Encryption Standard (AES) be used instead.\n"
                            },
                            "id": "semgrep_rules.gosec.G502-1",
                            "name": "semgrep_rules.gosec.G502-1",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                                    "OWASP-A9: Using Components with Known Vulnerabilities"
                                ]
                            },
                            "shortDescription": {
                                "text": "Usage of a cryptographically broken primitive has been detected. It is recommended that \nChaCha20 or Advanced Encryption Standard (AES) be used instead.\n"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "error"
                            },
                            "fullDescription": {
                                "text": "The use of hard-coded passwords increases the possibility of password guessing tremendously.\n"
                            },
                            "id": "semgrep_rules.gosec.G101-1",
                            "name": "semgrep_rules.gosec.G101-1",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-259: Use of Hard-coded Password",
                                    "OWASP-A3: Broken Authentication and Session Management"
                                ]
                            },
                            "shortDescription": {
                                "text": "The use of hard-coded passwords increases the possibility of password guessing tremendously.\n"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "note"
                            },
                            "fullDescription": {
                                "text": "To ensure reproducable and deterministic builds, use `npm ci` rather than `npm install` in scripts. This will use the lockfile rather than updating it."
                            },
                            "id": "semgrep_rules.use-frozen-lockfile-npm",
                            "name": "semgrep_rules.use-frozen-lockfile-npm",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-494: Download of Code Without Integrity Check"
                                ]
                            },
                            "shortDescription": {
                                "text": "To ensure reproducable and deterministic builds, use `npm ci` rather than `npm install` in scripts. This will use the lockfile rather than updating it."
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "error"
                            },
                            "fullDescription": {
                                "text": "Password is exposed through JWT token payload. This is not encrypted and the password could be compromised. Do not store passwords in JWT tokens."
                            },
                            "id": "semgrep_rules.jwt-exposed-credentials",
                            "name": "semgrep_rules.jwt-exposed-credentials",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-522: Insufficiently Protected Credentials",
                                    "OWASP-A2: Broken Authentication"
                                ]
                            },
                            "shortDescription": {
                                "text": "Password is exposed through JWT token payload. This is not encrypted and the password could be compromised. Do not store passwords in JWT tokens."
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "Detected non-literal calls to $EXEC(). This could lead to a command injection vulnerability."
                            },
                            "id": "semgrep_rules.detect-child-process",
                            "name": "semgrep_rules.detect-child-process",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
                                    "OWASP-A1: Injection"
                                ]
                            },
                            "shortDescription": {
                                "text": "Detected non-literal calls to $EXEC(). This could lead to a command injection vulnerability."
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "Ensure that actions that can result in privilege escalation are not used. These actions could potentially result in an attacker gaining full administrator access of an AWS account. Try not to use these actions."
                            },
                            "id": "semgrep_rules.no-iam-priv-esc-funcs",
                            "name": "semgrep_rules.no-iam-priv-esc-funcs",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-250: Execution with Unnecessary Privileges"
                                ]
                            },
                            "shortDescription": {
                                "text": "Ensure that actions that can result in privilege escalation are not used. These actions could potentially result in an attacker gaining full administrator access of an AWS account. Try not to use these actions."
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "Usage of a cryptographically insecure algorithm has been detected. It\nis recommended that alternative algorithms be used instead.\n"
                            },
                            "id": "semgrep_rules.gosec.G401-1",
                            "name": "semgrep_rules.gosec.G401-1",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                                    "OWASP-A9: Using Components with Known Vulnerabilities"
                                ]
                            },
                            "shortDescription": {
                                "text": "Usage of a cryptographically insecure algorithm has been detected. It\nis recommended that alternative algorithms be used instead.\n"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "Detected the use of require(variable). Calling require with a non-literal argument might allow an attacker to load an run arbitrary code, or access arbitrary files."
                            },
                            "id": "semgrep_rules.detect-non-literal-require",
                            "name": "semgrep_rules.detect-non-literal-require",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
                                    "OWASP-A1: Injection"
                                ]
                            },
                            "shortDescription": {
                                "text": "Detected the use of require(variable). Calling require with a non-literal argument might allow an attacker to load an run arbitrary code, or access arbitrary files."
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "Inject arbitrary props into the new element. It may introduce an XSS vulnerability."
                            },
                            "id": "semgrep_rules.react-props-injection",
                            "name": "semgrep_rules.react-props-injection",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
                                    "OWASP-A7: Cross-Site Scripting (XSS)"
                                ]
                            },
                            "shortDescription": {
                                "text": "Inject arbitrary props into the new element. It may introduce an XSS vulnerability."
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "Detected user input used in bracket notation accessor. This could lead to object injection through $FIELD, which could grant access to every property available in the object and therefore sensitive information. Instead, avoid the use of user input in property name fields or create a whitelist of allowed input."
                            },
                            "id": "semgrep_rules.detect-bracket-object-injection",
                            "name": "semgrep_rules.detect-bracket-object-injection",
                            "properties": {
                                "precision": "very-high",
                                "tags": []
                            },
                            "shortDescription": {
                                "text": "Detected user input used in bracket notation accessor. This could lead to object injection through $FIELD, which could grant access to every property available in the object and therefore sensitive information. Instead, avoid the use of user input in property name fields or create a whitelist of allowed input."
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "note"
                            },
                            "fullDescription": {
                                "text": "Using the unsafe package in Go gives you low-level memory management and many\nof the strength of the C language but also gives flexibility to the attacker of\nyour application. The pointer arithmetic is one of the examples from the unsafe\npackage which can be used for data leak, memory corruption or even execution of\nattackers own script.\n"
                            },
                            "id": "semgrep_rules.gosec.G103-1",
                            "name": "semgrep_rules.gosec.G103-1",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-242: Audit the use of unsafe block"
                                ]
                            },
                            "shortDescription": {
                                "text": "Using the unsafe package in Go gives you low-level memory management and many\nof the strength of the C language but also gives flexibility to the attacker of\nyour application. The pointer arithmetic is one of the examples from the unsafe\npackage which can be used for data leak, memory corruption or even execution of\nattackers own script.\n"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "Markup escaping disabled. This can be used with some template engines to escape\ndisabling of HTML entities, which can lead to XSS attacks.\n"
                            },
                            "id": "semgrep_rules.eslint.detect-disable-mustache-escape",
                            "name": "semgrep_rules.eslint.detect-disable-mustache-escape",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-79: Improper Neutralization of Input During Web Page Generation (XSS)",
                                    "OWASP-A7: Cross-Site Scripting XSS"
                                ]
                            },
                            "shortDescription": {
                                "text": "Markup escaping disabled. This can be used with some template engines to escape\ndisabling of HTML entities, which can lead to XSS attacks.\n"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "Password can be leaked if CSS injection exists on the page."
                            },
                            "id": "semgrep_rules.react-controlled-component-password",
                            "name": "semgrep_rules.react-controlled-component-password",
                            "properties": {
                                "precision": "very-high",
                                "tags": []
                            },
                            "shortDescription": {
                                "text": "Password can be leaked if CSS injection exists on the page."
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "An EBS volume is configured without encryption enabled."
                            },
                            "id": "semgrep_rules.unencrypted-ebs-volume",
                            "name": "semgrep_rules.unencrypted-ebs-volume",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-311: Missing Encryption of Sensitive Data"
                                ]
                            },
                            "shortDescription": {
                                "text": "An EBS volume is configured without encryption enabled."
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "SQL query construction using format string\n"
                            },
                            "id": "semgrep_rules.gosec.G201-1",
                            "name": "semgrep_rules.gosec.G201-1",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-89: Improper Neutralization of Special Elements used in an SQL Command"
                                ]
                            },
                            "shortDescription": {
                                "text": "SQL query construction using format string\n"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "Usage of a cryptographically insecure cipher suite has been detected. It is recommended that \nalternative ciphers be used instead.\n"
                            },
                            "id": "semgrep_rules.gosec.G402-1",
                            "name": "semgrep_rules.gosec.G402-1",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                                    "OWASP-A9: Using Components with Known Vulnerabilities"
                                ]
                            },
                            "shortDescription": {
                                "text": "Usage of a cryptographically insecure cipher suite has been detected. It is recommended that \nalternative ciphers be used instead.\n"
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "Ensure that no IAM policies allow \"*\" as a statement's actions. This allows all actions to be performed on the specified resources, and is a violation of the principle of least privilege. Instead, specify the actions that a certain user or policy is allowed to take."
                            },
                            "id": "semgrep_rules.no-iam-star-actions",
                            "name": "semgrep_rules.no-iam-star-actions",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-269: Improper Privilege Management"
                                ]
                            },
                            "shortDescription": {
                                "text": "Ensure that no IAM policies allow \"*\" as a statement's actions. This allows all actions to be performed on the specified resources, and is a violation of the principle of least privilege. Instead, specify the actions that a certain user or policy is allowed to take."
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "Ensure that IAM policies don't allow data exfiltration actions that are not resource-constrained. This can allow the user to read sensitive data they don't need to read. Instead, make sure that the user granted these privileges are given these permissions on specific resources."
                            },
                            "id": "semgrep_rules.no-iam-data-exfiltration",
                            "name": "semgrep_rules.no-iam-data-exfiltration",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-200: Exposure of Sensitive Information to an Unauthorized Actor"
                                ]
                            },
                            "shortDescription": {
                                "text": "Ensure that IAM policies don't allow data exfiltration actions that are not resource-constrained. This can allow the user to read sensitive data they don't need to read. Instead, make sure that the user granted these privileges are given these permissions on specific resources."
                            }
                        },
                        {
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "fullDescription": {
                                "text": "It is recommended that generated RSA keys are at least 2048 bits in length.\n"
                            },
                            "id": "semgrep_rules.gosec.G403-1",
                            "name": "semgrep_rules.gosec.G403-1",
                            "properties": {
                                "precision": "very-high",
                                "tags": [
                                    "CWE-326: Inadequate Encryption Strength",
                                    "OWASP-A3: Sensitive Data Exposure"
                                ]
                            },
                            "shortDescription": {
                                "text": "It is recommended that generated RSA keys are at least 2048 bits in length.\n"
                            }
                        }
                    ],
                    "semanticVersion": "0.104.0"
                }
            }
        }
    ],
    "version": "2.1.0"
}