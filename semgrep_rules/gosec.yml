# yamllint disable
# rule-set version: v1.0.26
# yamllint enable
---
rules:
- id: "gosec.G504-1"
  patterns:
  - pattern: |
      import "net/http/cgi"
  message: |
    Go versions < 1.6.3 are vulnerable to Httpoxy attack: (CVE-2016-5386)
  metadata:
    cwe: "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
    owasp: "A9: Using Components with Known Vulnerabilities"
  severity: "WARNING"
  languages:
  - "go"
- id: "gosec.G502-1"
  patterns:
  - pattern: |
      import "crypto/des"
  message: "Usage of a cryptographically broken primitive has been detected. It is
    recommended that \nChaCha20 or Advanced Encryption Standard (AES) be used instead.\n"
  metadata:
    cwe: "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
    owasp: "A9: Using Components with Known Vulnerabilities"
  severity: "WARNING"
  languages:
  - "go"
- id: "gosec.G501-1"
  patterns:
  - pattern: |
      import "crypto/md5"
  message: |
    The MD5 message-digest algorithm has been cryptographically broken and is unsuitable for
    further use. It is recommended that the SHA-3, or BLAKE2 family of algorithms be used for
    non-password based cryptographic hashes instead. For password based cryptographic hashes,
    consider using the bcrypt or Argon2 family of cryptographic hashes.
  metadata:
    cwe: "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
    owasp: "A9: Using Components with Known Vulnerabilities"
  severity: "WARNING"
  languages:
  - "go"
- id: "gosec.G503-1"
  patterns:
  - pattern: |
      import "crypto/rc4"
  message: |
    The RC4 stream-cipher has been cryptographically broken and is unsuitable
    for use in production. It is recommended that ChaCha20 or Advanced Encryption
    Standard (AES) be used instead.
  metadata:
    cwe: "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
    owasp: "A9: Using Components with Known Vulnerabilities"
  severity: "WARNING"
  languages:
  - "go"
- id: "gosec.G505-1"
  patterns:
  - pattern: |
      import "crypto/sha1"
  message: |
    The SHA-1 message-digest algorithm has been cryptographically broken and
    is unsuitable for further use. It is recommended that the SHA-3, or BLAKE2 family
    of algorithms be used for non-password based cryptographic hashes instead. For
    password based cryptographic hashes, consider using the bcrypt or Argon2 family
    of cryptographic hashes.
  metadata:
    cwe: "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
    owasp: "A9: Using Components with Known Vulnerabilities"
  severity: "WARNING"
  languages:
  - "go"
- id: "gosec.G402-1"
  patterns:
  - pattern-either:
    - pattern: |
        tls.Config{..., CipherSuites: []$SLICE{..., $CIPHERS, ...}, ...}
    - pattern: |
        tls.CipherSuite{..., ID: $CIPHERS, ...}
  - metavariable-regex:
      metavariable: "$CIPHERS"
      regex: "((?!tls.TLS_AES_128_GCM_SHA256)|(?!tls.TLS_AES_256_GCM_SHA384)|(?!tls.TLS_CHACHA20_POLY1305_SHA256)|
        (?!tls.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256)|(?!tls.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256)|
        (?!tls.TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384)|(?!tls.TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384)|
        (?!tls.TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305)|(?!tls.TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256)|
        (?!tls.TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305)|(?!tls.TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256)|
        (?!tls.TLS_DHE_RSA_WITH_AES_128_GCM_SHA256)|(?!tls.TLS_DHE_RSA_WITH_AES_256_GCM_SHA384))"
  message: "Usage of a cryptographically insecure cipher suite has been detected.
    It is recommended that \nalternative ciphers be used instead.\n"
  metadata:
    cwe: "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
    owasp: "A9: Using Components with Known Vulnerabilities"
  severity: "WARNING"
  languages:
  - "go"
- id: "gosec.G106-1"
  patterns:
  - pattern: "ssh.InsecureIgnoreHostKey(...)"
  message: |
    Audit the use of ssh.InsecureIgnoreHostKey
  metadata:
    cwe: "CWE-322: Key Exchange without Entity Authentication"
  severity: "WARNING"
  languages:
  - "go"
- id: "gosec.G401-1"
  patterns:
  - pattern-either:
    - pattern: |
        des.NewCipher(...)
    - pattern: |
        des.NewTripleDESCipher(...)
    - pattern: |
        md5.New()
    - pattern: |
        md5.Sum(...)
    - pattern: |
        rc4.NewCipher(...)
    - pattern: |
        sha1.New()
    - pattern: |
        sha1.Sum(...)
  message: |
    Usage of a cryptographically insecure algorithm has been detected. It
    is recommended that alternative algorithms be used instead.
  metadata:
    cwe: "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
    owasp: "A9: Using Components with Known Vulnerabilities"
  severity: "WARNING"
  languages:
  - "go"
- id: "gosec.G403-1"
  patterns:
  - pattern-either:
    - pattern: |
        rsa.GenerateKey(..., $ARG)
  - metavariable-comparison:
      metavariable: "$ARG"
      comparison: "$ARG < 2048"
  message: |
    It is recommended that generated RSA keys are at least 2048 bits in length.
  metadata:
    cwe: "CWE-326: Inadequate Encryption Strength"
    owasp: "A3: Sensitive Data Exposure"
  severity: "WARNING"
  languages:
  - "go"
- id: "gosec.G404-1"
  patterns:
  - patterns:
    - pattern-inside: |
        import $IMPORT "math/rand"
        ...
    - pattern-not-inside: |
        import "crypto/rand"
    - pattern-either:
      - pattern: "$IMPORT.$METHOD(...)"
      - pattern: "rand.$METHOD(...)"
  - metavariable-regex:
      metavariable: "$METHOD"
      regex: "(Float32|Float64|Int31|Int31n|Int63|Int63n|NormalFloat64|Uint32|Uint64)"
  message: |
    Use of weak random number generator (math/rand instead of crypto/rand)
  metadata:
    cwe: "CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)"
    owasp: "A3: Sensitive Data Exposure"
  severity: "WARNING"
  languages:
  - "go"
- id: "gosec.G302-1"
  patterns:
  - pattern-either:
    - pattern: "os.Chmod(...,$MASK)"
    - pattern: "os.OpenFile(...,$MASK)"
  - metavariable-comparison:
      metavariable: "$MASK"
      comparison: "$MASK > 0o600"
      base: 8
  message: |
    Poor file permissions used when creation file or using chmod
  metadata:
    cwe: "CWE-732: Incorrect Permission Assignment for Critical Resource"
    owasp: "A6: Security Misconfiguration"
  severity: "WARNING"
  languages:
  - "go"
- id: "gosec.G301-1"
  patterns:
  - pattern-either:
    - pattern: "os.Mkdir(...,$MASK)"
    - pattern: "os.MkdirAll(...,$MASK)"
  - metavariable-comparison:
      metavariable: "$MASK"
      comparison: "$MASK > 0o600 and $MASK != 0o750"
      base: 8
  message: |
    Poor file permissions used when creating a directory
  metadata:
    cwe: "CWE-732: Incorrect Permission Assignment for Critical Resource"
    owasp: "A6: Security Misconfiguration"
  severity: "WARNING"
  languages:
  - "go"
- id: "gosec.G110-1"
  mode: "taint"
  pattern-sinks:
  - pattern: "io.Copy(...)"
  - pattern: "io.CopyBuffer(...)"
  pattern-sources:
  - pattern: "gzip.NewReader(...)"
  - pattern: "zlib.NewReader(...)"
  - pattern: "bzip2.NewReader(...)"
  - pattern: "flate.NewReader(...)"
  - pattern: "lzw.NewReader(...)"
  - pattern: "tar.NewReader(...)"
  - pattern: "zip.NewReader(...)"
  - pattern: "zlib.NewReaderDict(...)"
  - pattern: "flate.NewReaderDict(...)"
  - pattern: "zip.OpenReader(...)"
  message: |
    Potential DoS vulnerability via decompression bomb
  metadata:
    cwe: "CWE-409: Improper Handling of Highly Compressed Data"
  severity: "WARNING"
  languages:
  - "go"
- id: "gosec.G304-1"
  patterns:
  - pattern-not-inside: |
      os.OpenFile(filepath.Clean(...), ...)
  - pattern-not-inside: |
      os.Open(filepath.Clean(...))
  - pattern-not-inside: |
      ioutil.ReadFile(filepath.Clean(...), ...)
  - pattern-not-inside: |
      os.OpenFile(filepath.Rel(...), ...)
  - pattern-not-inside: |
      os.Open(filepath.Rel(...))
  - pattern-not-inside: |
      ioutil.ReadFile(filepath.Rel(...), ...)
  - pattern-not-inside: |
      const $ARG = "..."
      ...
  - pattern-not-inside: |
      var $Y string = "..."
      ...
      $ARG = $Y
      ...
  - pattern-not-inside: |
      $ARG = filepath.Clean($X)
      ...
  - pattern-not-inside: |
      $ARG = filepath.Rel($X)
      ...
  - pattern-not-inside: |
      $ARG, ... := filepath.Rel("...", "...")
      ...
  - pattern-not: "os.OpenFile(\"...\" + strconv.Itoa($I), ...)"
  - pattern-not: "os.OpenFile(\"...\", ...)"
  - pattern-not: "os.Open(\"...\")"
  - pattern-not: "os.Open(\"...\" + strconv.Itoa($I))"
  - pattern-not: "ioutil.ReadFile(\"...\", ...)"
  - pattern-not: "ioutil.ReadFile(\"...\" + strconv.Itoa($I), ...)"
  - pattern-either:
    - pattern: "os.OpenFile($ARG, ...)"
    - pattern: "os.Open($ARG)"
    - pattern: "ioutil.ReadFile($ARG, ...)"
  message: |
    File open from tainted variable
  metadata:
    cwe: "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path
      Traversal')"
  severity: "WARNING"
  languages:
  - "go"
- id: "gosec.G306-1"
  patterns:
  - pattern-either:
    - pattern: |
        ioutil.WriteFile(..., ..., $ARG)
  - metavariable-comparison:
      metavariable: "$ARG"
      comparison: "$ARG > 0o600"
      base: 8
  message: |
    Expect WriteFile permissions to be 600 or less
  metadata:
    cwe: "CWE-276: Incorrect Default Permissions"
  severity: "WARNING"
  languages:
  - "go"
- id: "gosec.G303-1"
  patterns:
  - pattern-either:
    - pattern: |
        ioutil.WriteFile("$ARG", ...)
    - pattern: |
        os.Create("$ARG")
  - metavariable-regex:
      metavariable: "$ARG"
      regex: "(/tmp/.*|/var/tmp/.*)"
  message: |
    File creation in shared tmp directory without using ioutil.Tempfile
  metadata:
    cwe: "CWE-378: Creation of Temporary File With Insecure Permissions"
  severity: "WARNING"
  languages:
  - "go"
- id: "gosec.G305-1"
  mode: "taint"
  pattern-sources:
  - pattern: "zip.OpenReader(...)"
  pattern-sinks:
  - pattern: "filepath.Join(...)"
  message: |
    File traversal when extracting zip/tar archive
  metadata:
    cwe: "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path
      Traversal')"
  severity: "WARNING"
  languages:
  - "go"
- id: "gosec.G104-1.G107-1"
  patterns:
  - pattern-either:
    - patterns:
      - pattern: "http.Get($URL)"
      - pattern-not: "http.Get(\"...\")"
    - patterns:
      - pattern: "http.Head($URL)"
      - pattern-not: "http.Head(\"...\")"
    - patterns:
      - pattern: "http.Post($URL, ...)"
      - pattern-not: "http.Post(\"...\", ...)"
    - patterns:
      - pattern: "http.PostForm($URL, ...)"
      - pattern-not: "http.PostForm(\"...\", ...)"
    - patterns:
      - pattern-inside: |
          $REQ, ... := http.NewRequest(..., url, ...)
          ...
          $CLIENT := &http.Client{...}
          ...
      - pattern: "$CLIENT.Do($REQ)"
    - patterns:
      - pattern-not-inside: |
          const $X = "..."
          ...
      - pattern-not-inside: |
          var $Y string = "..."
          ...
          $X = $Y
          ...
      - pattern-not-inside: |
          $Y := "..."
          ...
          $X = $Y
          ...
      - pattern: "http.Get($X)"
  message: |
    Url provided to HTTP request as taint input
  metadata:
    cwe: "CWE-88: Improper Neutralization of Argument Delimiters in a Command"
  severity: "WARNING"
  languages:
  - "go"
- id: "gosec.G203-1"
  patterns:
  - pattern-either:
    - patterns:
      - pattern: "template.HTML($IN)"
      - pattern-not: "template.HTML(\"...\")"
    - patterns:
      - pattern: "template.JS($IN)"
      - pattern-not: "template.JS(\"...\")"
    - patterns:
      - pattern: "template.URL($IN)"
      - pattern-not: "template.URL(\"...\")"
    - patterns:
      - pattern: "template.HTMLAttr($IN)"
      - pattern-not: "template.HTMLAttr(\"...\")"
  message: |
    Use of unescaped data in HTML templates
  metadata:
    cwe: "CWE-79: Improper Neutralization of Input During Web Page Generation"
  severity: "WARNING"
  languages:
  - "go"
- id: "gosec.G108-1"
  patterns:
  - pattern: |
      import _ "net/http/pprof"
  message: |
    Profiling endpoint automatically exposed on /debug/pprof
  metadata:
    cwe: "CWE-200: Exposure of Sensitive Information to an Unauthorized Actor"
  severity: "ERROR"
  languages:
  - "go"
- id: "gosec.G109-1"
  patterns:
  - pattern-either:
    - patterns:
      - pattern-inside: |
          $X, ... := strconv.Atoi(...)
          ...
      - pattern-either:
        - pattern: "int32($X)"
        - pattern: "int16($X)"
  message: |
    Potential Integer overflow made by strconv.Atoi result conversion to int16/32
  metadata:
    cwe: "CWE-190: Integer Overflow or Wraparound"
  severity: "ERROR"
  languages:
  - "go"
- id: "gosec.G601-1"
  patterns:
  - pattern-either:
    - pattern: |
        for _, $ARG := range $SLICE {
          <... &($ARG) ...>
        }
    - pattern: |
        for _, $ARG := range $SLICE {
          <... func() { <... &$ARG ...> } ...>
        }
    - pattern: |
        for _, $ARG := range $SLICE {
          <... $X(..., <... $ARG ...>, ...) ...>
        }
  - pattern-not: "for _, $ARG := range $SLICE {\n  <... *$ARG ...>\n}\n"
  - pattern-not-inside: |-
      for _, $ARG := range $SLICE { return ... }
  message: |
    Implicit memory aliasing in for loop.
  metadata:
    cwe: "CWE-118: Incorrect Access of Indexable Resource ('Range Error')"
  severity: "WARNING"
  languages:
  - "go"
- id: "gosec.G102-1"
  patterns:
  - pattern-either:
    - pattern: "net.Listen(..., \"$ADDR\")"
    - pattern: "tls.Listen(..., \"$ADDR\", ...)"
  - metavariable-regex:
      metavariable: "$ADDR"
      regex: "0.0.0.0:[0-9]+"
  message: |
    Binding to all network interfaces can potentially open up a service to
    traffic on unintended interfaces, that may not be properly documented or
    secured. This plugin test looks for a string pattern “0.0.0.0” that may
    indicate a hardcoded binding to all network interfaces.
  metadata:
    cwe: "CWE-200: Exposure of Sensitive Information to an Unauthorized Actor"
    owasp: "A6: Security Misconfiguration"
  severity: "WARNING"
  languages:
  - "go"
- id: "gosec.G101-1"
  patterns:
  - pattern-either:
    - pattern: "$MASK = \"...\""
  - metavariable-regex:
      metavariable: "$MASK"
      regex: "(password|pass|passwd|pwd|secret|token)"
  message: |
    The use of hard-coded passwords increases the possibility of password guessing tremendously.
  metadata:
    cwe: "CWE-259: Use of Hard-coded Password"
    owasp: "A3: Broken Authentication and Session Management"
  severity: "ERROR"
  languages:
  - "go"
- id: "gosec.G202-1"
  patterns:
  - pattern-inside: |
      import "database/sql"
      ...
  - pattern-either:
    - pattern: "$DB.Query($Q + $IN)"
    - pattern: "$DB.QueryContext(..., $Q + $IN)"
  - pattern-not: "$DB.QueryContext(..., \"...\" + \"...\")"
  - pattern-not: "$DB.Query(\"...\" + \"...\")"
  message: |
    SQL query construction using string concatenation
  metadata:
    cwe: "CWE-89: Improper Neutralization of Special Elements used in an SQL Command"
  severity: "WARNING"
  languages:
  - "go"
- id: "gosec.G201-1"
  patterns:
  - pattern-inside: |
      $Q := fmt.Sprintf("$QUERY", ...)
      ...
  - pattern-not-inside: |
      $Q := fmt.Sprintf("$QUERY", "...")
      ...
  - pattern-not-inside: |
      pq.QuoteIdentifier(...)
      ...
  - metavariable-regex:
      metavariable: "$QUERY"
      regex: "(?i)(SELECT|DELETE|INSERT|UPDATE|INTO|FROM|WHERE).*%[^bdoxXfFp].*"
  - pattern-either:
    - pattern: "$DB.QueryContext(..., $Q)"
    - pattern: "$DB.Query($Q)"
  message: |
    SQL query construction using format string
  metadata:
    cwe: "CWE-89: Improper Neutralization of Special Elements used in an SQL Command"
  severity: "WARNING"
  languages:
  - "go"
- id: "gosec.G204-1"
  patterns:
  - pattern-either:
    - patterns:
      - pattern: "exec.CommandContext($CTX, $EXE, ...)"
      - pattern-not: "exec.CommandContext($CTX, \"...\", ...)"
    - patterns:
      - pattern: "exec.Command($EXE, ...)"
      - pattern-not: "exec.Command(\"...\", ...)"
    - patterns:
      - pattern: "syscall.ForkExec($EXE, ...)"
      - pattern-not: "syscall.ForkExec(\"...\", ...)"
    - patterns:
      - pattern: "syscall.StartProcess($EXE, ...)"
      - pattern-not: "syscall.StartProcess(\"...\", ...)"
  message: |
    Audit use of command execution
  metadata:
    cwe: "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      ('Eval Injection')"
    owasp: "A1: Injection"
  severity: "WARNING"
  languages:
  - "go"
- id: "gosec.G103-1"
  patterns:
  - pattern-either:
    - pattern: "unsafe.Alignof(...)"
    - pattern: "unsafe.Offsetof(...)"
    - pattern: "unsafe.Sizeof(...)"
    - pattern: "unsafe.Pointer(...)"
  message: |
    Using the unsafe package in Go gives you low-level memory management and many
    of the strength of the C language but also gives flexibility to the attacker of
    your application. The pointer arithmetic is one of the examples from the unsafe
    package which can be used for data leak, memory corruption or even execution of
    attackers own script.
  metadata:
    cwe: "CWE-242: Audit the use of unsafe block"
  severity: "INFO"
  languages:
  - "go"
